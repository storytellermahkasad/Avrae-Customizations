<drac2> #Tort
# Pull ammo type, or create and complain
if not get('AmmoInfo',""):
  err(f""""**Ammunition Tracking:** Ammo bag not set. Set it with `!ammo bag <bagName>`" """)

# If there's no ammo at all, everything misses
Info = load_json(AmmoInfo)

if not Info.Bags:
  err(f""""**Ammunition Tracking:** Ammo bag not set. Set it with `!ammo bag <bagName>`" """)

if not (ammo_name := Info.Loaded.Name):
 err(f""""**Ammunition Tracking:** No Ammo Loaded. Load ammo with `!ammo load <ammoType>`" """)
 
ammo_chance = Info.Loaded.Chance

AmmoTypes = load_json('{}')
if get_gvar(get("userAmmoTypes")):
  AmmoTypes.update(load_json(get_gvar(userAmmoTypes)))
if get_svar("serverAmmoTypes"):
  AmmoTypes.update(load_json(get_gvar(get_svar("serverAmmoTypes", '{}'))))

if not AmmoTypes: # Pull in the default if we're empty
  AmmoTypes.update(load_json(get_gvar('ce642622-169d-4f32-b8f1-a09689a39603')))

bagName = Info.Bags
ammo_names=[ammo_name, ammo_name+'s']
store_bag = load_json(bags)
ammo_bags = [(b[1],sum([b[1].get(n,0) for n in ammo_names])) for b in store_bag if b[0].lower() == bagName.lower()]

# count the ammo in the ammo bags
ammo_bags = [(b,a) for (b,a) in ammo_bags if a>0]
total_remaining = sum([q for (_,q) in ammo_bags])

if total_remaining < 1:
  err(f"**Ammunition Tracking**: There are not enough `{ammo_name}`s left in your equipment {bagName} (use `!bag {bagName}` to check your inventory there).")

# Get Fired/Used
Fired = Info.Fired
Used = Info.Used
ammo_fired = [x for x in Info.Fired if x.Name == ammo_name]
ammo_used = [x for x in Info.Used if x.Name == ammo_name]

if ammo_fired:
 ammo_fired = ammo_fired[0]
 Fired.remove(ammo_fired)
else:
 ammo_fired = load_json('{"Name": "'+ammo_name+'", "Chance": '+str(ammo_chance)+', "Amount": 0}')
if ammo_used:
 ammo_used = ammo_used[0]
 Used.remove(ammo_used)
else:
 ammo_used = load_json('{"Name": "'+ammo_name+'", "Chance": '+str(ammo_chance)+', "Amount": 0}')

# remove the ammo from the first ammo bag
ammo_bag = ammo_bags[0][0]
for ammo in ammo_names:
 if remaining:=ammo_bag.get(ammo,0):
  remaining-=1
  total_remaining-=1
  ammo_used['Amount'] += 1
  ammo_fired['Amount'] += 1
  if remaining:
    ammo_bag[ammo]=remaining
  else:
    ammo_bag.pop(ammo)
  break
# Save out the changes to the ammo
set_cvar("bags", dump_json(store_bag))
Used.append(ammo_used)
Fired.append(ammo_fired)
Info.update(load_json('{"Used": '+dump_json(Used)+', "Fired": '+dump_json(Fired)+'}'))
set_cvar('AmmoInfo', dump_json(Info))
return f"""{AmmoTypes.Enhancements[Info.Loaded.Enhancement] if Info.Loaded.get('Enhancement') else ''} -f "{ammo_name}s Remaining in {bagName}|{total_remaining}" """
</drac2>
