<drac2>
#assign args
args = &ARGS&
strArgs = "&*&"
n = '\n'
# Prebuilt Ammo Types
AmmoTypes = load_json('{}')

if get_gvar(get("userAmmoTypes")):
  AmmoTypes.update(load_json(get_gvar(userAmmoTypes)))
if get_svar("serverAmmoTypes"):
  AmmoTypes.update(load_json(get_gvar(get_svar("serverAmmoTypes", '{}'))))

if not AmmoTypes: # Pull in the default if we're empty
  AmmoTypes.update(load_json(get_gvar('ce642622-169d-4f32-b8f1-a09689a39603')))

selectedType,ammoList,collectedList = "","",""
# Pull ammo type, or create and complain
set_cvar_nx('AmmoInfo', dump_json(load_json('{\"Loaded\": \"\", \"Bags\": \"\", \"Used\": [], \"Fired\": []}')))
# If there's no ammo at all, everything misses
Info = load_json(AmmoInfo)
store_bag = load_json(bags)

AmmoNames = list(AmmoTypes.Ammo.keys())
for baseName in AmmoNames:
  baseType = AmmoTypes.Ammo[baseName]
  ammoList += '\n'+baseName+': '
  for subType in baseType.Subtypes:
    # Store to the List
    # The name is always a reference to the base type
    ammoList += (' '+subType.get('Name').replace('@','') if subType.get('Name') else '')

# Catch the Old Version and Update
old = ""
if typeof(Info.Loaded) == 'str':
  old = Info
  for baseName in AmmoNames:
    baseType = AmmoTypes.Ammo[baseName]
    if old.Loaded == baseName: # Handle them selecting a base type
      selectedType = load_json('{'+f""" "Name": "{baseName}", "Chance": {baseType.Chance}{', "Enhancement": "'+baseType.get('Enhance')+'"' if baseType.get('Enhance') else ''} """+'}')
      break
    for subType in baseType.Subtypes:
      # The name is always a reference to the base type
      # This also means we get the base Type as and entry with the baseChance
      ammoName = subType.get('Name', baseName).replace('@', baseName)
      # Store to the List
      recoverChance = subType.get('Chance', baseType.Chance)
      # Add base and sub Enhance together if both exist
      enhance = subType.get('Enhance') + (' '+baseType.get('Enhance') if baseType.get('Enhance') else '')

      if strArgs.lower() == ammoName.lower():
        selectedType = load_json('{'+f""" "Name": "{ammoName}", "Chance": {recoverChance}{', "Enhancement": "'+enhance+'"' if enhance else ''} """+'}')
        break
  Info['Loaded'] = selectedType
  
# Catch the Old Version and Update
fireFix = []
for val in Info.Fired:
  if not val.get('Name'):
    Info.Fired.remove(val)
    fireFix.append(load_json('{'+f""" "Name": "{val.name}", "Amount": {val.amount} """+'}'))
# Only replace if updated
if fireFix:
  Info['Fired'] = fireFix
# Write out the fixes
if fireFix or old:
  set_cvar('AmmoInfo', dump_json(Info))

title = "Ammunition Tracking"
help = f"""For tracking ammunition taken directly from your inventory.
`!ammo load <ammotype>` - Load a type of ammo by exact name
`!ammo bag <bagName>` - Pick a source bag for your ammo
`!ammo collect <discard>` - Pick up ammo after a fight, `discard` if ammo was lost
`ammo`- Snippet for attacking

**Always use one attack at a time while using** `ammo`"""
stat = f"""**Loaded Ammo**: `{Info.Loaded.Name if Info.Loaded else 'None'}`
**Ammo Source**: `{Info.Bags if Info.Bags else 'None'}`
**Fired Ammo**:
{n.join(["  "+x.Name+": "+str(x.Amount) for x in Info.Fired])}"""

foot = f"""{ctx.prefix+ctx.alias} | Ammo Tracking | Made by Mahkasad#5996"""
adds = "-color <color> -thumb <image>"

if not args: # View fired ammo and help
  return f"""embed -title '{title}' -desc '{help+n+n+stat}' -footer '{foot}' {adds}"""

elif args[0] == 'bag' and len(args)>1:
  mode = args.pop(0)
  strArgs = strArgs.replace(mode,'',1).lstrip() # Strip the chosen mode
  strArgs = strArgs.strip("\"") # get rid of quotes
  selected = [b for b in store_bag if strArgs.lower() == b[0].lower()]
  
  if not selected:
    selected = [b for b in store_bag[::-1] if strArgs.lower() in b[0].lower()]
  
  if not selected:
    return f"""embed -title '{title}' -desc 'Could not find `{strArgs}`. Check your inventory to ensure it exists.{n+n+help+n+n+stat}' -footer '{foot}' {adds}"""
  Info['Bags'] = selected[0][0]
  set_cvar('AmmoInfo', dump_json(Info))
  stat = f"""**Loaded Ammo**: `{Info.Loaded.Name if Info.Loaded else 'None'}`
  **Ammo Source**: `{Info.Bags}`
  **Fired Ammo**:
  {n.join(["  "+x.Name+": "+str(x.Amount) for x in Info.Fired])}"""
  return f"""embed -title '{title}' -desc '{help+n+n+stat}' -footer '{foot}' {adds}"""

elif args[0] == 'collect':
  mode = args.pop(0)
  strArgs = strArgs.replace(mode,'',1).lstrip() # Strip the chosen mode
  strArgs = strArgs.strip("\"") # get rid of quotes
  
  discard = args and args[0] == 'discard'
  Used = Info.Used
  # Get the bag
  bagName = Info.Bags
  ammo_bags = [x for x in store_bag if x[0] == bagName]

  if not ammo_bags:
    err(f"**Ammunition Tracking**: `{bagName}` not found. (use `!bag` to check your inventory there).")

  if not Used:
    return f"""embed -title '{title}' -desc '{name} has no ammo to collect.{n+n+stat}' -footer '{foot}' {adds}"""

  # add the ammo from the first ammo bag
  ammo_bag = ammo_bags[0][1]
  for ammo in Used:
    # Pull the Used Ammo info
    restore = floor(ammo.Amount * ammo.Chance)

    if not discard:
      # calculate return amount from list
      if restore > 0: # don't write to the bag if we didn't actually recover ammo
        ammo_bag.update(load_json('{"'+ammo.Name+'": '+str(restore+ammo_bag.get(ammo.Name,0))+'}'))
      # append to info
      collectedList += f"{n if collectedList else ''}{ammo.Name}: {restore} | {ammo.Amount} > {ammo_bag[ammo.Name] if ammo.Name in ammo_bag else 0}"
    else: # append to info
      collectedList += f"{n if collectedList else ''}{ammo.Name}: {ammo.Amount} > {ammo_bag[ammo.Name] if ammo.Name in ammo_bag else 0}"
  if not discard: # Save out the bag changes    
    set_cvar("bags", dump_json(store_bag))
    message = f"(Collected | Used > Remain):{n+collectedList+n+n+stat}"
  else: # Different message for discarding
    title += " - Discard"
    message = f"(Discarded > Remain):{n+collectedList+n+n+stat}"
  # Always save out the Ammo Info
  Info.update(load_json('{"Used": []}'))
  set_cvar('AmmoInfo', dump_json(Info))
  return f"""embed -title '{title}' -desc '{name} collects their ammo.{n}{message}' -footer '{foot}' {adds}"""

elif args[0] == 'load':
  mode = args.pop(0)
  strArgs = strArgs.replace(mode,'',1).lstrip() # Strip the chosen mode
  strArgs = strArgs.strip("\"") # get rid of quotes
  if len(args) > 0:
    for baseName in AmmoNames:
      baseType = AmmoTypes.Ammo[baseName]
      if strArgs.lower() == baseName.lower(): # Handle them selecting a base type
        selectedType = load_json('{'+f""" "Name": "{baseName}", "Chance": {baseType.Chance}{', "Enhancement": "'+baseType.get('Enhance')+'"' if baseType.get('Enhance') else ''} """+'}')
        break

      for subType in baseType.Subtypes:
        # The name is always a reference to the base type
        # This also means we get the base Type as and entry with the baseChance
        ammoName = subType.get('Name', baseName).replace('@', baseName)
        # Store to the List
        recoverChance = subType.get('Chance', baseType.Chance)
        # Add base and sub Enhance together if both exist
        enhance = subType.get('Enhance') + (' '+baseType.get('Enhance') if baseType.get('Enhance') else '')

        if strArgs.lower() == ammoName.lower():
          selectedType = load_json('{'+f""" "Name": "{ammoName}", "Chance": {recoverChance}{', "Enhancement": "'+enhance+'"' if enhance else ''} """+'}')
          break
    # Fuzzy Match in reverse
    if not selectedType:
      for baseName in AmmoNames[::-1]:
        baseType = AmmoTypes.Ammo[baseName]
        if strArgs.lower() in baseName.lower(): # Handle them selecting a base type
          selectedType = load_json('{'+f""" "Name": "{baseName}", "Chance": {baseType.Chance}{', "Enhancement": "'+baseType.get('Enhance')+'"' if baseType.get('Enhance') else ''} """+'}')
          break

        for subType in baseType.Subtypes:
          # The name is always a reference to the base type
          # This also means we get the base Type as and entry with the baseChance
          ammoName = subType.get('Name', baseName).replace('@', baseName)
          recoverChance = subType.get('Chance', baseType.Chance)
          # Add base and sub Enhance together if both exist
          enhance = subType.get('Enhance') + (' '+baseType.get('Enhance') if baseType.get('Enhance') else '')

          if strArgs.lower() in ammoName.lower():
            selectedType = load_json('{'+f""" "Name": "{ammoName}", "Chance": {recoverChance}{', "Enhancement": "'+enhance+'"' if enhance else ''} """+'}')
            break

  if not selectedType:
    return f"""embed -title 'Ammunition Tracking' -desc '{"Ammo type `"+strArgs+"` not found." if strArgs else "Choose the ammo type to load."}
    The Ammo format is: `[Enhancement] <AmmoType>`

    **Valid Ammo Types and their Enhancements:**{ammoList}' -footer '{foot}' {adds}"""

  Info['Loaded'] = selectedType
  set_cvar('AmmoInfo', dump_json(Info))
  stat = f"""**Loaded Ammo**: `{Info.Loaded.Name if Info.Loaded else 'None'}`
  **Ammo Source**: `{Info.Bags}`
  **Fired Ammo**:
  {n.join(["  "+x.Name+": "+str(x.Amount) for x in Info.Fired])}"""
  return f"""embed -title '{title}' -desc '{help+n+n+stat}' -footer '{foot}' {adds}"""
else:
  return f"""embed -title '{title}' -desc '{help+n+n+stat}' -footer '{foot}' {adds}"""
</drac2>