<drac2> # Battle Planner
args = &ARGS&
com = ""
out = ""
Commands = ["view","begin","end","help", "?", "delete", "clear"]
Mode=[x for x in args if x.lower() in Commands]
Source=get('BattlePlanLoc', 'Battles')
RBattles = load_json(get(Source, '{}'))
Battles = []
foot=f'-footer "!bplan help | Battle Source: {Source} | v1.0 Made by @Mahksad#5996"'
BP="Battle Planner"
title=f'embed -title "{BP}"'

# Sort the Battles so we can get correct hits
# I hate this. We also fuzzy match in reverse
# This fixes the 'Arctic T1 82' 'Arctic T1 8' issue
if RBattles:
  Battles = list(RBattles)
  for i in range(len(Battles)-1):
    for j in range(i+1,len(Battles)):
      if Battles[i]>Battles[j]:
        temp = Battles[i]
        Battles[i] = Battles[j]
        Battles[j] = temp

if not Mode or (not Battles and not (Mode[0]=='help' or Mode[0]=='?')):
  for plan in Battles:
    out = out + f'`\'{plan}\'`\n'
  if not out:
    out = f'"No Battles Found. Add one with `!denc` or manually to `!uvar {Source}`."'
    return (f'{title} -desc "Select a Battle Plan:\n\"{out}\"" {foot}')
  else:
    return (f'{title} -desc "The Battle Planner Tool is designed for interacting with Avrae\'s Combat Initiative and simplify preparing combats.\n\n`view <battlename>` - Look at a specific battle\n`begin <battlename>` - Start Initiative for a battle\n`end` - End Initiative (Same as `!i end`)\n`delete <battlename>` - Delete a single battle by name\n`clear confirm` - Deletes all battles, but only if both commands are passed\n\nSelect a Battle Plan:\n{out}" {foot}')

elif Mode[0] == 'help' or Mode[0] == '?':
  return (f'embed -title "{BP} - Help" -desc "The Battle Planner Tool is designed for interacting with Avrae\'s Combat Initiative and simplify preparing combats.\n\n`view <battlename>` - Look at a specific battle\n`begin <battlename>` - Start Initiative for a battle\n`end` - End Initiative (Same as `!i end`)\n`delete <battlename>` - Delete a single battle by name\n`clear confirm` - Deletes all battles, but only if both commands are passed\n\nBPlan is compatible with [Dynamic Encounter Tool](https://avrae.io/dashboard/workshop/5f790de74ded026d119cff20) and `!battle` by _Derixyleth#0636_\n\nCurrently BPlan is under development.\nSee the [workshop](https://avrae.io/dashboard/workshop/5f7eb5d2f2d59b2718720f7f) for more details." {foot}')

elif Mode[0] == 'end':
  return (f'i end')

elif Mode[0] == 'clear':
  args.remove(args[0])
  if not args or not args[0]=='confirm':
    return (f'embed -title "{BP} - Clear All Battles" -desc "You must specify a confirmation to clear all battles:\n`!bplan clear confirm`" {foot}')
  else:
    set_uvar(Source, "{}")
    return (f'embed -title "{BP} - Clear All Battles" -desc "All Battles Cleared. Add more with `!denc`, `!battle`, or manually to {Source}" {foot}')

elif Mode[0] == 'delete':
  args.remove(args[0])
  pick=""
  for plan in Battles:
    out = out + f'`\'{plan}\'`\n'
    if args and args[0].lower() == plan.lower():
      pick=plan
  if not args:
    return (f'embed -title "{BP} - Delete Battle" -desc "You must specify a Battle Name to Delete:\n{out}" {foot}')
  elif not pick:
    for plan in Battles[::-1]:
      if args and args[0].lower() in plan.lower():
        pick=plan
  if not pick:
    return (f'embed -title "{BP} - Delete Battle" -desc "Battle `{args[0]}` Not Found\n{out}" {foot}')
  else:
    out=out.replace(f'`\'{pick}\'`\n','',1)
    RBattles.pop(pick)
    set_uvar(Source, dump_json(RBattles))
    return (f'embed -title "{BP} - Delete Battle" -desc "Battle Deleted: `{pick}`\n\nRemaing Battles:\n{out}" {foot}')

elif Mode[0] == 'begin':
  args.remove(args[0])
  pick=""
  for plan in Battles:
    out = out + f'`\'{plan}\'`\n'
    if args and args[0].lower() == plan.lower():
      pick=plan
  if not args:
    return (f'embed -title "{BP} - Begin Battle" -desc "You must specify a Battle Name:\n{out}" {foot}')
  elif not pick:
    for plan in Battles[::-1]:
      if args and args[0].lower() in plan.lower():
        pick=plan
  if not pick:
    return (f'embed -title "{BP} - Begin Battle" -desc "Battle `{args[0]}` Not Found\n{out}" {foot}')
  else:
    com = RBattles[pick][0]
  for creature in RBattles[pick]:
    crea = creature.split(' ')
    # check we're not old format
    if crea[0] == '!i':
      crea = creature.replace('!i madd ','')
    else:
      crea = creature    
    out = out + f'!i madd {crea}\n'
  return (f'multiline\n!i begin\n{out}')

elif Mode[0] == 'view':
  args.remove(args[0])
  pick=creaout=opts=""
  # Exact Match
  for plan in Battles:
    out = out + f'`\'{plan}\'`\n'
    if args and args[0].lower() == plan.lower():
      pick=plan
  # Fuzzy Match
  if not pick:
    for plan in Battles[::-1]:
      if args and args[0].lower() in plan.lower():
        pick=plan
  if not args:
    return (f'embed -title "{BP} - Battle Viewer" -desc "You must specify a Battle Name:\n{out}" {foot}')
  if not pick:
    return (f'embed -title "{BP} - Battle Viewer" -desc "Battle `{args[0]}` Not Found\n{out}" {foot}')
  else:
    for creature in RBattles[pick]:
      crea=creature
      # check we're not old format
      if creature.startswith('!i'):
        crea=crea.replace('!i madd ','')
      crename = crea.split(' -')[0]
      # Remove adv/dis from the name
      crename = crename.replace(' adv','').replace(' dis', '')
      # Get all the Options Out
      work=argparse(crea)
      opts = ("\n*Name:* "+ work.join('name'," ") if work.get('name') else '') + ("\n*Num:* "+ work.last('n',None,str) if work.get('n') else '') + ("\n*Group:* "+ work.join('group'," ") if work.get('group') else '') + ("\n\n" if work.adv() or work.get('b') or work.get('p') or work.get('hp') or work.get('thp') or work.get('ac') else '') + ("*Adv:* "+("dis" if work.adv()==-1 else "adv" if work.adv()==1 else '') if work.adv() else '') + (" *-b:* "+ work.last('b',None,str) if work.get('b') else '') + (" *-p:* "+ work.last('p',None,str) if work.get('p') else '') + (" *HP:* "+ work.last('hp',None,str) if work.get('hp') else '') + (" *THP:* "+ work.last('thp',None,str) if work.get('thp') else '') + (" *AC:* "+ work.last('ac',None,str) if work.get('ac') else '') + ("\n" if work.get('h') or work.get('rollhp') else '') + ("*Not Hidden* " if work.get('h') else '') + ("*Roll for HP*" if work.get('rollhp') else '') + ("\n\n*Note:* "+ work.join('note'," ") if work.get('note') else '')
      creaout = creaout + f'-f "\"{crename}\"|{opts}" '
    return (f'embed -title "{BP} - Battle Viewer" -desc "__{pick}__" {creaout} {foot}')
</drac2>
